// C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function to find the maximum Bitwise
// XOR of any subset of the array of size K
int maximumXOR(int arr[], int n, int K)
{
	// Number of node must K + 1 for
	// K edges
	K++;

	// Stores the maximum Bitwise XOR
	int maxXor = INT_MIN;

	// Generate all subsets of the array
	for (int i = 0; i < (1 << n); i++) {

		// __builtin_popcount() returns
		// the number of sets bits in
		// an integer
		if (__builtin_popcount(i) == K) {

			// Initialize current xor as 0
			int cur_xor = 0;

			for (int j = 0; j < n; j++) {

				// If jth bit is set in i
				// then include jth element
				// in the current xor
				if (i & (1 << j))
					cur_xor = cur_xor ^ arr[j];
			}

			// Update the maximum Bitwise
			// XOR obtained so far
			maxXor = max(maxXor, cur_xor);
		}
	}

	// Return the maximum XOR
	return maxXor;
}

// Driver Code
int main()
{
	int arr[] = { 1, 2, 3, 4 };
	int N = sizeof(arr) / sizeof(int);
	int M = 2;
	cout << maximumXOR(arr, N, M);

	return 0;
}
